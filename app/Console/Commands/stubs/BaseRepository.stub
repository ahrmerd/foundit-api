<?php

namespace App\Repositories;

use Illuminate\Database\Eloquent\Builder;
use App\Http\Resources\BaseResource;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Http\Resources\Json\JsonResource;
use Spatie\QueryBuilder\QueryBuilder;
use Exception;
/**
 * Class BaseRepository.
 */
abstract class BaseRepository
{

    /**
     * The repository model.
     *
     * @var \Illuminate\Database\Eloquent\Model
     */
    protected $model;


    /**
     * The repository model resource.
     *
     * @var null|\lluminate\Http\Resources\Json\JsonResource
     */
    protected JsonResource $resource;

    abstract protected function getFilters();
    abstract protected function getIncludes();
    abstract protected function getSorts();
    /**
     * The query builder.
     *
     * @var \Illuminate\Database\Eloquent\Builder
     */
    protected $query;

    /**
     * Alias for the query limit.
     *
     * @var int
     */
    protected $take;

    /**
     * Array of related models to eager load.
     *
     * @var array
     */
    protected $with = [];

    public function setLimit(Builder $query, $count = 10): Builder
    {
        return $query->when(request()->has('limit'), fn (Builder $query) => $query->limit($count));
    }

    public function setLimitAndOffset(Builder $query, $count = 10, $from = 0)
    {
        return $this->setOffset($this->setLimit($query, $count), $from);
    }

    public function setOffset(Builder $query, $from = 0): Builder
    {
        return $query->when(request()->has('offset'), fn (Builder $query) => $query->offset($from));
    }

    /**
     * BaseRepository constructor.
     */
    public function __construct()
    {
        $this->makeModel();
        $this->makeResource();
    }

    /**
     * Specify Model class name.
     *
     * @return mixed
     */
    abstract public function model();

    /**
     * @return Model|mixed
     * @throws GeneralException
     */
    public function makeModel()
    {
        $model = app()->make($this->model());

        if (!$model instanceof Model) {
            throw new Exception("Class {$this->model()} must be an instance of " . Model::class);
        }

        return $this->model = $model;
    }

    public function makeResource()
    {
        $namespace = 'App\Http\Resources';
        try {
            $resourceClass = $namespace . '\\' . class_basename($this->model()) . 'Resource';
            $resourceInstance = new $resourceClass([]);
            if ($resourceInstance instanceof JsonResource) {
                return $this->resource = $resourceClass;
            }
        } catch (\Throwable $th) {
            // throw $th;
        }
        return $this->resource = BaseResource::class;
    }


    /**
     * Get all the model records in the database.
     *
     * @param array $columns
     *
     * @return Collection|static[]
     */
    public function all(array $columns = ['*'])
    {
        $this->newQuery()->eagerLoad();

        $models = $this->query->get($columns);

        return $models;
    }

    /**
     * Create a new model record in the database.
     *
     * @param array $data
     *
     * @return \Illuminate\Database\Eloquent\Model
     */
    public function create(array $data)
    {
        return $this->model->create($data);
    }

    /**
     * Create one or more new model records in the database.
     *
     * @param array $data
     *
     * @return \Illuminate\Database\Eloquent\Collection
     */
    public function createMultiple(array $data)
    {
        $models = new Collection();

        foreach ($data as $d) {
            $models->push($this->create($d));
        }

        return $models;
    }

    /**
     * Delete one or more model records from the database.
     *
     * @return mixed
     */
    public function delete()
    {

        $result = $this->query->delete();

        return $result;
    }

    /**
     * Delete the specified model record from the database.
     *
     * @param $id
     *
     * @return bool|null
     * @throws \Exception
     */
    public function deleteById($id): bool
    {

        return $this->getById($id)->delete();
    }

    /**
     * Delete multiple records.
     *
     * @param array $ids
     *
     * @return int
     */
    public function deleteMultipleById(array $ids): int
    {
        return $this->model->destroy($ids);
    }

    /**
     * Get the first specified model record from the database.
     *
     * @param array $columns
     *
     * @return Model|static
     */
    public function first(array $columns = ['*'])
    {
        $model = $this->query->firstOrFail($columns);
        return new $this->resource($model);
    }

    /**
     * Get all the specified model records in the database.
     *
     * @param array $columns
     *
     * @return Collection|static[]
     */
    public function get(array $columns = ['*'])
    {
        $models = $this->query->get($columns);

        return $models;
    }

    /**
     * Get the specified model record from the database.
     *
     * @param       $id
     * @param array $columns
     *
     * @return Collection|Model
     */
    public function getById($id, array $columns = ['*'])
    {
        $this->newQuery()->eagerLoad();

        return $this->query->findOrFail($id, $columns);
    }

    public function index()
    {
        $total = $this->model->count();
        $query = QueryBuilder::for($this->model)
            ->allowedIncludes($this->includes)
            ->allowedFilters($this->filters)
            ->allowedSorts($this->sorts);
        $query = $this->setLimitAndOffset($query);
        $models = request()->has('page') ? $query->paginate() : $query->get();
        // DepartmentResource::collection($model)->additional()
        if ($this->resource) {
            return $this->resource::collection(($models))->additional(['Total-Count' => $total]);
        } else {
            return ['data' => $models, 'Total-Count' => $total];
        }
    }

    /**
     * Update the specified model record in the database.
     *
     * @param       $id
     * @param array $data
     * @param array $options
     *
     * @return Collection|Model
     */
    public function updateById($id, array $data, array $options = [])
    {

        $model = $this->getById($id);

        $model->update($data, $options);

        return $model;
    }

    /**
     * Set the query limit.
     *
     * @param int $limit
     *
     * @return $this
     */
    public function limit($limit)
    {
        $this->take = $limit;
        return $this;
    }

    /**
     * Set Eloquent relationships to eager load.
     *
     * @param $relations
     *
     * @return $this
     */
    public function with($relations)
    {
        if (is_string($relations)) {
            $relations = func_get_args();
        }

        $this->with = $relations;

        return $this;
    }

    /**
     * Create a new instance of the model's query builder.
     *
     * @return $this
     */
    protected function newQuery()
    {
        $this->query = $this->model->newQuery();

        return $this;
    }

    /**
     * Add relationships to the query builder to eager load.
     *
     * @return $this
     */
    protected function eagerLoad()
    {
        foreach ($this->with as $relation) {
            $this->query->with($relation);
        }

        return $this;
    }
}
